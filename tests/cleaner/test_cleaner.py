import pytest
from kangaroo.cleaner.text_cleaner import clean_text

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Å—Ç—Ä–æ–∫–∏
simple_text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! 123 üòä <b>–¢–µ–∫—Å—Ç</b>"
list_of_texts = ["–¢–µ—Å—Ç ‚Ññ1 üòÅ", "HTML <div>–ø—Ä–∏–º–µ—Ä</div>", "–°–¢–û–ü —Å–ª–æ–≤–∞ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å!"]

list_input = ['–≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–∏—Ç–∞—Ç—å —Å—Ä–æ—á–Ω–æ', '–∫—É–ø–∏ —Å–µ–π—á–∞—Å —Å–∫–∏–¥–∫–∞ —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è', '—ç—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ —è –Ω–µ –æ–∂–∏–¥–∞–ª —á–µ—Å—Ç–Ω–æ', '–∞–ø—Ä–µ–ª—è –≥–æ–¥–∞ ‚Äî —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å–º–æ—Å–µ', 'alerthack—Ç–µ–∫—Å—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º xss', '–≥–æ–¥ –±—ã–ª —Å–ª–æ–∂–Ω—ã–º –Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º', '–æ–±–∑–æ—Ä —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ samsung galaxy s –≥–±–≥–± snapdragon', 'hello world python ai', '–ø–ª–æ—Ö–æ–π —Å–µ—Ä–≤–∏—Å —É–∂–∞—Å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω', '–º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∞–±–æ–≤', '–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—Å–µ–≥–æ', '—Ä–æ—Å—Å–∏—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ —É–∫—Ä–∞–∏–Ω–∞ ‚Äî —Å—Ç—Ä–∞–Ω—ã —Å–Ω–≥', 'html –≤–Ω—É—Ç—Ä–∏ html', '', '']
list_output = ['–≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–∏—Ç–∞—Ç—å —Å—Ä–æ—á–Ω–æ', '–∫—É–ø–∏ —Å–∫–∏–¥–∫–∞ —Å–µ–≥–æ–¥–Ω—è', '—ç—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –æ–∂–∏–¥–∞–ª —á–µ—Å—Ç–Ω–æ', '–∞–ø—Ä–µ–ª—è –≥–æ–¥–∞ ‚Äî —á–µ–ª–æ–≤–µ–∫ –∫–æ—Å–º–æ—Å–µ', 'alerthack—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º xss', '–≥–æ–¥ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º', '–æ–±–∑–æ—Ä —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ samsung galaxy s –≥–±–≥–± snapdragon', 'hello world python ai', '–ø–ª–æ—Ö–æ–π —Å–µ—Ä–≤–∏—Å —É–∂–∞—Å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω', '–ø—Ä–æ–±–µ–ª–æ–≤ —Ç–∞–±–æ–≤', '–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç', '—Ä–æ—Å—Å–∏—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω —É–∫—Ä–∞–∏–Ω–∞ ‚Äî —Å—Ç—Ä–∞–Ω—ã —Å–Ω–≥', 'html –≤–Ω—É—Ç—Ä–∏ html', '', '']
def test_clean_single_string():
    result = clean_text("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! 123 üòä", remove_digits=True, remove_emojis=True)
    assert "123" not in result
    assert "üòä" not in result
    assert isinstance(result, str)

def test_remove_html():
    text = "<p>–≠—Ç–æ <b>–≤–∞–∂–Ω–æ</b></p>"
    cleaned = clean_text(text, remove_html=True)
    assert "<" not in cleaned and ">" not in cleaned

def test_remove_stopwords():
    text = "–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    result = clean_text(text, remove_stopwords=True, stopword_language="russian")
    assert "—ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in result.lower()

def test_return_stopwords():
    sw = clean_text("", return_stopwords=True, stopword_language="russian")
    assert isinstance(sw, list)
    assert "–∏" in sw  # –°–ª–æ–≤–æ "–∏" —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ø–∏—Å–∫–æ–≤ —Å—Ç–æ–ø-—Å–ª–æ–≤

def test_list_of_texts_multithreaded():
    result = clean_text(
        list_of_texts,
        remove_html=True,
        remove_digits=True,
        remove_emojis=True,
        remove_stopwords=True,
        stopword_language="russian",
        batch_size=2,
        max_workers=2
    )
    assert isinstance(result, list)
    assert all(isinstance(r, str) for r in result)
    assert "üòÅ" not in result[0]
    assert "<div>" not in result[1]
    assert "–°–¢–û–ü" not in result[2].lower()

def test_invalid_input_type():
    with pytest.raises(TypeError):
        clean_text(12345)

def test_large_batch():
    texts = ["–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ ‚Ññ{} üòä <div>html</div>".format(i) for i in range(100)]
    cleaned = clean_text(texts, batch_size=10, max_workers=4)
    assert len(cleaned) == 100
    assert all("üòä" not in t and "<div>" not in t for t in cleaned)

@pytest.mark.parametrize("input_text,expected_output", [
    ('–≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–∏—Ç–∞—Ç—å —Å—Ä–æ—á–Ω–æ', '–≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–∏—Ç–∞—Ç—å —Å—Ä–æ—á–Ω–æ'),
    ('–∫—É–ø–∏ —Å–µ–π—á–∞—Å —Å–∫–∏–¥–∫–∞ —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è', '–∫—É–ø–∏ —Å–∫–∏–¥–∫–∞ —Å–µ–≥–æ–¥–Ω—è'),
    ('—ç—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ —è –Ω–µ –æ–∂–∏–¥–∞–ª —á–µ—Å—Ç–Ω–æ', '—ç—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –æ–∂–∏–¥–∞–ª —á–µ—Å—Ç–Ω–æ'),
    ('–∞–ø—Ä–µ–ª—è –≥–æ–¥–∞ ‚Äî —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å–º–æ—Å–µ', '–∞–ø—Ä–µ–ª—è –≥–æ–¥–∞ ‚Äî —á–µ–ª–æ–≤–µ–∫ –∫–æ—Å–º–æ—Å–µ'),
    ('alerthack—Ç–µ–∫—Å—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º xss', 'alerthack—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º xss'),
    ('–≥–æ–¥ –±—ã–ª —Å–ª–æ–∂–Ω—ã–º –Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º', '–≥–æ–¥ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º'),
    ('–æ–±–∑–æ—Ä —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ samsung galaxy s –≥–±–≥–± snapdragon', '–æ–±–∑–æ—Ä —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ samsung galaxy s –≥–±–≥–± snapdragon'),
    ('hello world python ai', 'hello world python ai'),
    ('–ø–ª–æ—Ö–æ–π —Å–µ—Ä–≤–∏—Å —É–∂–∞—Å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω', '–ø–ª–æ—Ö–æ–π —Å–µ—Ä–≤–∏—Å —É–∂–∞—Å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'),
    ('–º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∞–±–æ–≤', '–ø—Ä–æ–±–µ–ª–æ–≤ —Ç–∞–±–æ–≤'),
    ('–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—Å–µ–≥–æ', '–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç'),
    ('—Ä–æ—Å—Å–∏—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ —É–∫—Ä–∞–∏–Ω–∞ ‚Äî —Å—Ç—Ä–∞–Ω—ã —Å–Ω–≥', '—Ä–æ—Å—Å–∏—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω —É–∫—Ä–∞–∏–Ω–∞ ‚Äî —Å—Ç—Ä–∞–Ω—ã —Å–Ω–≥'),
    ('html –≤–Ω—É—Ç—Ä–∏ html', 'html –≤–Ω—É—Ç—Ä–∏ html'),
    ('', ''),
    ('', '')
])
def test_clean_text_expected_output(input_text, expected_output):
    cleaned = clean_text(input_text, remove_stopwords=True, stopword_language="russian")
    assert cleaned == expected_output